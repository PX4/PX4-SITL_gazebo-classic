{# ---------------------------------------------------------------- #}
{# general geometry and properties#}
{# ---------------------------------------------------------------- #}
{%- set log_airship_dynamics = 1 -%}
{%- set log_motor_forces = 1 -%}
{%- set log_fin_forces = 1 -%}
{%- set plot_aerodynamics_forces = 0 -%}

{# geometry #}
{# hull geometry #}
{%- set hull_length = 14.356 -%}
{%- set hull_max_diameter = 3.338 -%}

{# hull volume #}
{%- set hull_volume = 87.98 -%}

{# fineness Ratio #}
{%- set fineness_ratio = 4.5 -%}

{# center of volume as measured from the nose #}
{%- set hull_cv = 6.798245698288959 -%}

{# center of gravity as measured from the CV #}
{%- set hull_cg_x = 0.0211 -%}
{%- set hull_cg_y = 0.000 -%}
{%- set hull_cg_z = -0.936 -%}

{# mass and moment of inertia #}
{%- set mass = 102.85 -%}

{%- set ixx = 558.8664089 -%}
{%- set iyy = 617.39743597 -%}
{%- set izz = 764.31756395 -%}

{# material properties #}
{# air density (at MSL 15 deg) #}
{%- set air_density = 1.169 -%}
{# gas density (Helium) #}
{%- set gas_density = 0.167 -%}

{# actuator properties #}
{# maximum thruster rotational velocity (rad/s) #}
{%- set mot_max_vel = 655 -%}
{# maximum thruster lift (kg) #}
{%- set mot_max_thrust_kg = 20 -%}
{# main thrusters time constant #}
{%- set mot_tau = 0.07 -%}
{# maximum thruster angle (rad) #}
{%- set mot_max_angle = 360 * np.pi / 180 -%}
{# maximum control surface angle (rad) #}
{%- set fin_cs_max_angle = 120 * np.pi / 180 -%}
{# simulation motor slowdown #}
{%- set sim_rotor_slow = 20 -%}
{# maximum tail thruster rotational velocity (rad/s) #}
{%- set tail_mot_max_vel = 655 -%}
{# maximum tail thruster lift (kg) #}
{%- set tail_mot_max_thrust_kg = 15 -%}
{# main tail thrusters time constant #}
{%- set tail_mot_tau = 0.07 -%}
{# thruster motor constant #}
{%- set mot_coeff = (mot_max_thrust_kg * 9.81)/(mot_max_vel**2) -%}
{# tail thruster motor constant #}
{%- set tail_mot_coeff = (tail_mot_max_thrust_kg * 9.81)/(tail_mot_max_vel**2) -%}

{# actuator geometry #}
{# motor distance from gondola #}
{%- set d_mot_y = 1.5 -%}
{# thruster rod radius #}
{%- set mot_rod_r = 0.03 -%}
{# thruster prop radius (16") #}
{%- set mot_prop_r = 0.2032 -%}
{# tail thruster prop radius (16") #}
{%- set tail_mot_prop_r = 0.2032 -%}
{# thruster rod radius inertia factor #}
{%- set mot_rod_r_inertia_factor = 20 -%}
{# thruster prop height #}
{%- set mot_prop_h = 0.02 -%}

{# fins #}
{%- set fin_root_chord = 1.872 -%}
{%- set fin_span = 0.98 -%}
{%- set fin_thickness = 0.02 -%}
{%- set fin_cs_chord = 0.410 -%}
{%- set fin_cs_gap = 0.001 -%}

{# center of fin distance from nose and distance from center of hull #}
{%- set d_fin_x_c = 10.77 -%}
{%- set r_fin_rad = 0.41 -%}
{%- set r_fin_cop_x = 5.10653559 -%}
{%- set r_fin_cop_z = 1.737608 -%}
{%- set angle_fin = 20.13833019 -%}
{%- set angle_cs_diff_fin = 7 -%}

{# aerodynamic properties #}
{# added mass #}
{%- set m11 = 7.565 -%}
{%- set m22 = 96.366 -%}
{%- set m26 = 32.88 -%}
{%- set m33 = m22 -%}
{%- set m35 = -m26 -%}
{%- set m44 = 13.03 -%}
{%- set m53 = -m26 -%}
{%- set m55 = 236.657 -%}
{%- set m62 = m26 -%}
{%- set m66 = m55 -%}

{# aerodynamic coefficients #}
{%- set dist_potential_flow = hull_cv - 12.34245577700727 -%}
{%- set force_hull_inviscid_flow_coeff = -3.106982155301005 -%}
{%- set force_hull_viscous_flow_coeff = 2.1059728145144914 -%}
{%- set moment_hull_inviscid_flow_coeff = 20.24930722567859 -%}
{%- set moment_hull_viscous_flow_coeff = -13.341622825927411 -%}
{%- set fin_normal_force_coeff = 1.2981061370780032 -%}
{%- set fin_cs_rad_to_cl = 2*np.pi*0.8*0.75*1.2 -%}
{%- set fin_stall_angle = np.rad2deg(0.6997924350094509) -%}
{%- set axial_drag_coeff = 0.001 -%}

{# ---------------------------------------------------------------- #}
{# positions #}
{# ---------------------------------------------------------------- #}
{# hull center of volume #}
{%- set origin_x = hull_cv -%}
{%- set origin_y = 0 -%}
{%- set origin_z = 0 -%}

{# ---------------------------------------------------------------- #}
{# macros #}
{# ---------------------------------------------------------------- #}
{# inertial #}
{%- macro inertial(m, ixx, iyy, izz) -%}
<inertial>
  <mass>{{m}}</mass>
  <inertia>
    <ixx>{{ixx}}</ixx>
    <iyy>{{iyy}}</iyy>
    <izz>{{izz}}</izz>
  </inertia>
</inertial>
{%- endmacro -%}

{# inertial offset #}
{%- macro inertial_offset(m, ixx, iyy, izz, x, y, z) -%}
<inertial>
  <pose>{{ x }} {{ y }} {{ z }} 0 0 0</pose>
  <mass>{{m}}</mass>
  <inertia>
    <ixx>{{ixx}}</ixx>
    <iyy>{{iyy}}</iyy>
    <izz>{{izz}}</izz>
  </inertia>
</inertial>
{%- endmacro -%}

{# cylinder #}
{%- macro cylinder(r, h) -%}
<geometry>
  <cylinder>
    <radius>{{r}}</radius>
    <length>{{h}}</length>
  </cylinder>
</geometry>
{%- endmacro -%}

{# box #}
{%- macro box(x, y, z) -%}
<geometry>
  <box>
    <size>{{x}} {{y}} {{z}}</size>
  </box>
</geometry>
{%- endmacro -%}

{# fin plugin #}
{%- macro fin_plugin(name, cop_y, cop_z, u_y, u_z, roll) -%}

  <link name="{{ name }}">
    <pose>{{ -r_fin_cop_x }} {{ cop_y }} {{ cop_z }} 0 0 0</pose>
    {{ inertial(0.001, 0.001, 0.001, 0.001) }}
    <visual name="{{ name }}_visual">
      <pose>0 0 0 {{ roll }} 0 0</pose>
      {{ box(fin_root_chord, fin_thickness, fin_span) }}
      <material>
          <script>
            <name>Gazebo/White</name>
            <uri>__default__</uri>
          </script>
        </material>
        {% if plot_aerodynamics_forces == 1 %}
          <plugin name="{{ name }}_lift_visual" filename="libForceVisual.so">
            <topic_name>{{ name }}_liftforce_visual</topic_name>
            <color>Gazebo/Blue</color>
          </plugin>
        {% endif %}
    </visual>
  </link>

  <joint name='{{ name }}_joint' type='revolute'>
    <parent>hull</parent>
    <child>{{ name }}</child>
    <pose>{{ fin_root_chord/2 }} 0 0 0 0 0</pose>
    <axis>
      <xyz>1 0 0</xyz>
      <limit>
        <lower>-{{ 0 }}</lower>
        <upper>{{ 0 }}</upper>
      </limit>
      <dynamics>
        <damping>1.0</damping>
      </dynamics>
    </axis>
    <physics>
      <ode>
        <implicit_spring_damper>1</implicit_spring_damper>
      </ode>
    </physics>
  </joint>

  <plugin name="{{ name }}_model" filename="libLiftDragPlugin.so">
    <a0>0.0</a0>
    <cla>{{ fin_normal_force_coeff / (fin_root_chord * fin_span) }}</cla>
    <cda>0.0</cda>
    <cma>0.0</cma>
    <alpha_stall>{{ np.radians(fin_stall_angle) }}</alpha_stall>
    <cla_stall>0.0</cla_stall>
    <cda_stall>0.0</cda_stall>
    <cma_stall>0.0</cma_stall>
    <cp>{{ -r_fin_cop_x }} {{ cop_y }} {{ cop_z }}</cp>
    <area>{{ fin_root_chord * fin_span }}</area>
    <air_density>{{ air_density }}</air_density>
    <forward>1 0 0</forward>
    <upward>0 {{ u_y }} {{ u_z }}</upward>
    <link_name>hull</link_name>
    <control_joint_name>{{ name }}_joint</control_joint_name>
    {% if plot_aerodynamics_forces == 1 %}
      <topic_name>{{ name }}_liftforce_visual</topic_name>
    {% endif %}
    <robotNamespace></robotNamespace>
  </plugin>

{%- endmacro -%}

{# control surfaces #}
{%- macro control_surface(name, y, z, roll, pitch, yaw, axis_y, axis_z, u_y, u_z, i_span, i_thickness, i_chord, direction) -%}
  <link name="{{ name }}">
    {%- set fin_cs_mass = 0.02 -%}

    <pose>{{ hull_cv - d_fin_x_c - fin_root_chord - fin_cs_chord/2 - fin_cs_gap }} {{ y }} {{ z }} 0 {{ pitch }} {{ yaw }}</pose>
    {{ inertial(fin_cs_mass, fin_cs_mass * (1/12)*(i_span**2 + i_thickness**2), fin_cs_mass * (1/12)*(i_chord**2 + i_span**2), fin_cs_mass * (1/12)*(i_chord**2 + i_thickness**2))|indent(6) }}

    <gravity>true</gravity>
    <self_collide>false</self_collide>
    <velocity_decay/>

    <visual name="{{ name }}_visual">
      <pose>0 0 0 {{ roll }} 0 0</pose>
      {{ box(fin_cs_chord, fin_thickness, fin_span) }}
      <material>
          <script>
            <name>Gazebo/Black</name>
            <uri>__default__</uri>
          </script>
        </material>
        {% if plot_aerodynamics_forces == 1 %}
          <plugin name="{{ name }}_lift_visual" filename="libForceVisual.so">
            <topic_name>{{ name }}_liftforce_visual</topic_name>
            <color>Gazebo/Blue</color>
          </plugin>
        {% endif %}
    </visual>

    <collision name="{{ name }}_collision">
      <pose>0 0 0 {{ roll }} 0 0</pose>
      {{ box(fin_cs_chord, fin_thickness, fin_span) }}
    </collision>
  </link>

  <joint name='{{ name }}_joint' type='revolute'>
    <parent>hull</parent>
    <child>{{ name }}</child>
    <pose>{{ fin_cs_chord/2 }} 0 0 0 0 0</pose>
    <axis>
      <xyz>0 {{ -axis_y }} {{ axis_z }}</xyz>
      <limit>
        <lower>-{{ fin_cs_max_angle/2 }}</lower>
        <upper>{{ fin_cs_max_angle/2 }}</upper>
      </limit>
      <dynamics>
        <damping>0.1</damping>
      </dynamics>
    </axis>
    <physics>
      <ode>
        <implicit_spring_damper>1</implicit_spring_damper>
      </ode>
    </physics>
  </joint>

  <plugin name="{{ name }}_model" filename="libLiftDragPlugin.so">
    <a0>0.0</a0>
    <cla>0.0</cla>
    <cda>0.0</cda>
    <cma>0.0</cma>
    <alpha_stall>{{ np.radians(fin_stall_angle) }}</alpha_stall>
    <cla_stall>0.0</cla_stall>
    <cda_stall>0.0</cda_stall>
    <cma_stall>0.0</cma_stall>
    <cp>{{ hull_cv - d_fin_x_c - fin_root_chord - fin_cs_gap }} {{ y }} {{ z }}</cp>
    <area>{{ fin_cs_chord * fin_span }}</area>
    <air_density>{{ air_density }}</air_density>
    <forward>1 0 0</forward>
    <upward>0 {{ u_y }} {{ u_z }}</upward>
    <link_name>hull</link_name>
    <control_joint_name>
      {{ name }}_joint
    </control_joint_name>
    <control_joint_rad_to_cl>{{ direction * fin_cs_rad_to_cl }}</control_joint_rad_to_cl>
    {% if plot_aerodynamics_forces == 1 %}
      <topic_name>{{ name }}_liftforce_visual</topic_name>
    {% endif %}
    <robotNamespace></robotNamespace>
  </plugin>
{%- endmacro -%}

{# Tilt thruster #}
{%- macro tilt_thruster(motor_num, direction, parent, mot_prop_r, mot_tau, mot_max_vel, mot_coeff, reversible, dist_x, dist_y, dist_z, roll) -%}
  <link name="motor_{{ motor_num }}">
  <pose>{{ dist_x }} {{ dist_y }} {{ dist_z }} {{ 0 }} {{ 0 }} {{ 0 }} </pose>
  <inertial>
    <pose>0 0 0 0 0 0</pose>
    <mass>0.05</mass>
    <inertia>
      <ixx>0.0166704</ixx>
      <ixy>0</ixy>
      <ixz>0</ixz>
      <iyy>0.0166704</iyy>
      <iyz>0</iyz>
      <izz>0.0167604</izz>
    </inertia>
  </inertial>
  <collision name="motor_{{motor_num}}_collision">
    <pose>0 0 0 0 0 0</pose>
    <geometry>
      <cylinder>
        <length>0.01</length>
        <radius>0.01</radius>
      </cylinder>
    </geometry>
    <surface>
      <contact>
        <ode/>
      </contact>
      <friction>
        <ode/>
      </friction>
    </surface>
  </collision>
  <visual name="motor_{{ motor_num }}_visual">
  <pose>0 0 0 0 0 0</pose>
    <geometry>
      <cylinder>
        <length>0.1</length>
        <radius>0.1</radius>
      </cylinder>
    </geometry>
    <material>
      <script>
        <name>Gazebo/DarkGrey</name>
        <uri>__default__</uri>
      </script>
    </material>
  </visual>
  <gravity>1</gravity>
  <velocity_decay/>
  <self_collide>0</self_collide>
  </link>

  <joint name='motor_{{ motor_num }}_joint' type='revolute'>
    <parent>{{ parent }}</parent>
    <child>motor_{{ motor_num }}</child>
    <axis>
      <xyz>0 1 0</xyz>
      <limit>
        <lower>-{{ mot_max_angle/2 }}</lower>
        <upper>{{ mot_max_angle/2 }}</upper>
      </limit>
      <dynamics>
        <friction>1.0</friction>
        <spring_reference>0</spring_reference>
        <spring_stiffness>0</spring_stiffness>
      </dynamics>
      <use_parent_model_frame>1</use_parent_model_frame>
    </axis>
  </joint>

  <link name="rotor_{{ motor_num }}">
    {%- set motor_mass = 0.025 -%}
    <pose>{{ dist_x }} {{ dist_y }} {{ dist_z }} {{ 0 }} {{ 0 }} 0</pose>
    <inertial>
      <pose>0 0 0 0 0 0</pose>
      <mass>0.005</mass>
      <inertia>
        <ixx>9.75e-07</ixx>
        <ixy>0</ixy>
        <ixz>0</ixz>
        <iyy>0.000166704</iyy>
        <iyz>0</iyz>
        <izz>0.000167604</izz>
      </inertia>
    </inertial>

    <visual name="rotor_{{ motor_num }}_visual">
      <geometry>
        <mesh>
          <scale>{{ mot_prop_r * 2 / 0.25711 }} {{ mot_prop_r * 2 / 0.25711 }} {{ mot_prop_h / 0.00959 }}</scale>
          <uri>model://cloudship2/meshes/prop_{{ direction }}.dae</uri>
        </mesh>
      </geometry>
      <material>
        <script>
          <name>Gazebo/DarkGrey</name>
          <uri>__default__</uri>
        </script>
      </material>
    </visual>

    <collision name="rotor_{{ motor_num }}_collision">
      <geometry>
        <cylinder>
          <length>{{ mot_prop_h }}</length>
          <radius>{{ mot_prop_r }}</radius>
        </cylinder>
      </geometry>
    </collision>
</link>

<joint name='rotor_{{ motor_num }}_joint' type='revolute'>
  <child>rotor_{{ motor_num }}</child>
  <parent>motor_{{ motor_num }}</parent>
  <axis>
    <xyz>0 0 1</xyz>
    <limit>
      <lower>-1e+16</lower>
      <upper>1e+16</upper>
    </limit>
    <dynamics>
      <spring_reference>0</spring_reference>
      <spring_stiffness>0</spring_stiffness>
    </dynamics>
  </axis>
</joint>

{# Only to visualize motor spin #}
<plugin name='rotor_{{ motor_num }}_model' filename='libgazebo_motor_model.so'>
  <robotNamespace/>
  <jointName>rotor_{{ motor_num }}_joint</jointName>
  <linkName>rotor_{{ motor_num }}</linkName>
  <turningDirection>{{ direction }}</turningDirection>
  <reversible>{{ reversible }}</reversible>
  <timeConstantUp>{{ mot_tau }}</timeConstantUp>
  <timeConstantDown>{{ mot_tau }}</timeConstantDown>
  <maxRotVelocity>{{ mot_max_vel }}</maxRotVelocity>
  <motorConstant>{{ mot_coeff }}</motorConstant>
  <momentConstant>{{ 0 }}</momentConstant>
  <rotorDragCoefficient>0.000806428</rotorDragCoefficient>
  <rollingMomentCoefficient>0.000001</rollingMomentCoefficient>
  <commandSubTopic>/gazebo/command/motor_speed</commandSubTopic>
  <motorNumber>{{ motor_num }}</motorNumber>
  <motorSpeedPubTopic>/motor_speed/{{ motor_num }}</motorSpeedPubTopic>
  <rotorVelocitySlowdownSim>{{sim_rotor_slow}}</rotorVelocitySlowdownSim>
</plugin>
{%- endmacro -%}

{# thruster #}
{%- macro thruster(motor_num, direction, parent, mot_prop_r, mot_tau, mot_max_vel, mot_coeff, reversible, dist_x, dist_y, dist_z, roll) -%}
 <link name="rotor_{{ motor_num }}">
  {%- set motor_mass = 0.0001 -%}
  <pose>{{ dist_x }} {{ dist_y }} {{ dist_z }} {{ roll }} {{ 0 }} 0</pose>
  {{ inertial(motor_mass, motor_mass*mot_prop_h**2, motor_mass*(1/12)*((2*mot_prop_r)**2 + mot_prop_h**2), motor_mass*(1/12)*((2*mot_prop_r)**2 + mot_prop_h**2))|indent(6) }}

  <gravity>false</gravity>
  <self_collide>false</self_collide>
  <velocity_decay/>

  <visual name="rotor_{{ motor_num }}_visual">
    <geometry>
      <mesh>
        <scale>{{ mot_prop_r * 2 / 0.25711 }} {{ mot_prop_r * 2 / 0.25711 }} {{ mot_prop_h / 0.00959 }}</scale>
        <uri>model://cloudship2/meshes/prop_{{ direction }}.dae</uri>
      </mesh>
    </geometry>
    <material>
      <script>
        <name>Gazebo/DarkGrey</name>
        <uri>__default__</uri>
      </script>
    </material>
  </visual>

  <collision name="rotor_{{ motor_num }}_collision">
    <geometry>
      <cylinder>
        <length>{{ mot_prop_h }}</length>
        <radius>{{ mot_prop_r }}</radius>
      </cylinder>
    </geometry>
  </collision>
</link>

<joint name='rotor_{{ motor_num }}_joint' type='revolute'>
  <child>rotor_{{ motor_num }}</child>
  <parent>{{ parent }}</parent>
  <axis>
    <xyz>0 0 1</xyz>
    <limit>
      <lower>-1e+16</lower>
      <upper>1e+16</upper>
    </limit>
    <dynamics>
      <spring_reference>0</spring_reference>
      <spring_stiffness>0</spring_stiffness>
    </dynamics>
  </axis>
</joint>

{# Only to visualize motor spin #}
<plugin name='rotor_{{ motor_num }}_model' filename='libgazebo_motor_model.so'>
  <robotNamespace/>
  <jointName>rotor_{{ motor_num }}_joint</jointName>
  <linkName>rotor_{{ motor_num }}</linkName>
  <turningDirection>{{ direction }}</turningDirection>
  <reversible>{{ reversible }}</reversible>
  <timeConstantUp>{{ mot_tau }}</timeConstantUp>
  <timeConstantDown>{{ mot_tau }}</timeConstantDown>
  <maxRotVelocity>{{ mot_max_vel }}</maxRotVelocity>
  <motorConstant>{{ mot_coeff }}</motorConstant>
  <momentConstant>{{ 0 }}</momentConstant>
  <rotorDragCoefficient>0.000806428</rotorDragCoefficient>
  <rollingMomentCoefficient>0.000001</rollingMomentCoefficient>
  <commandSubTopic>/gazebo/command/motor_speed</commandSubTopic>
  <motorNumber>{{ motor_num }}</motorNumber>
  <motorSpeedPubTopic>/motor_speed/{{ motor_num }}</motorSpeedPubTopic>
  <rotorVelocitySlowdownSim>{{sim_rotor_slow}}</rotorVelocitySlowdownSim>
</plugin>
{%- endmacro -%}

{# ---------------------------------------------------------------- #}
{# SDF description #}
{# ---------------------------------------------------------------- #}
<!-- DO NOT EDIT: Generated from cloudship2.sdf.jinja -->
<sdf version="1.5">

  <model name="cloudship2">

    <self_collide>false</self_collide>
    <static>false</static>

    {# Airship #}
    <link name="hull">
      <pose>0 0 0 0 0 0</pose>
      {{ inertial_offset(mass, ixx, iyy, izz, hull_cg_x, hull_cg_y, hull_cg_z)|indent(6) }}

      <gravity>true</gravity>
      <self_collide>false</self_collide>
      <velocity_decay/>

      {# Hull #}
      <visual name="hull_visual">
      <pose>{{ 0 }} {{ origin_y }} {{ origin_z }} -0.523599 0 0</pose>
        <geometry>
          <mesh>
            <scale>0.001 0.001 0.001</scale>
            <uri>model://cloudship2/meshes/cloudship2.stl</uri>
          </mesh>
        </geometry>
        <material>
          <script>
            <name>Gazebo/White</name>
            <uri>__default__</uri>
          </script>
        </material>
      </visual>

      {# Hull Collsion: Made as box around hull #}
      <collision name="hull_collision">
        <pose>{{ 0 }} {{ 0 }} {{ 0 }} 0 0 0</pose>
        <geometry>
          <box>
            <size>{{hull_length}} {{hull_max_diameter}} {{hull_max_diameter}}</size>
          </box>
        </geometry>
      </collision>
    </link>

    <link name='/imu_link'>
      <pose>0 0 -1.2 0 0 0</pose>
      <inertial>
        <pose>0 0 0 0 0 0</pose>
        <mass>0.0001</mass>
        <inertia>
          <ixx>1e-05</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>1e-05</iyy>
          <iyz>0</iyz>
          <izz>1e-05</izz>
        </inertia>
      </inertial>
      <visual name="imu_link_visual">
        <geometry>
          <sphere>
            <radius>0.01</radius>
          </sphere>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Blue</name>
          </script>
        </material>
      </visual>
    </link>
    <joint name='/imu_joint' type='revolute'>
      <child>/imu_link</child>
      <parent>hull</parent>
      <axis>
        <xyz>1 0 0</xyz>
        <limit>
          <lower>0</lower>
          <upper>0</upper>
          <effort>0</effort>
          <velocity>0</velocity>
        </limit>
        <dynamics>
          <spring_reference>0</spring_reference>
          <spring_stiffness>0</spring_stiffness>
        </dynamics>
        <use_parent_model_frame>1</use_parent_model_frame>
      </axis>
    </joint>

    {# Airspeed Sensor #}
    <include>
    <uri>model://airspeed</uri>
    <pose>0 0 0 0 0 0</pose>
    <name>airspeed</name>
    </include>
    <joint name="airspeed_joint" type="fixed">
      <child>airspeed::link</child>
      <parent>hull</parent>
    </joint>

    {# Airflow Sensor #}
    <include>
      <uri>model://airflowsensor</uri>
      <pose>5 0 -3 0 0</pose>
      <name>airflowsensor</name>
    </include>
    <joint name="airflowsensor_joint" type="fixed">
      <child>airflowsensor::link</child>
      <parent>hull</parent>
    </joint>

    {# First GPS #}
    <include>
      <uri>model://gps</uri>
      <pose>0.1 0 -1.2 0 0 0</pose>
      <name>gps</name>
    </include>
    <joint name='gps_joint' type='fixed'>
      <child>gps::link</child>
      <parent>hull</parent>
    </joint>

    {# Lidar #}
    <include>
      <uri>model://sf10a</uri>
      <pose>0 0 {{ -hull_max_diameter/2 - 0.01}} 0 0 0</pose>
      <name>sf10a</name>
    </include>
    <joint name='sf10a_joint' type='fixed'>
      <child>sf10a::link</child>
      <parent>hull</parent>
    </joint>

    {# Control surfaces #}
    {%- set cs_angle = np.radians(angle_fin - angle_cs_diff_fin) -%}
    {{ control_surface("rudder_top", 0, r_fin_cop_z, 0, 0, 0, 0, 1, 1, 0, fin_span, fin_thickness, fin_cs_chord, 1) }}
    {{ control_surface("elevator_sb", -r_fin_cop_z*np.cos(np.pi/6), -r_fin_cop_z*np.sin(np.pi/6), np.pi/3*2, 0, 0, 1*np.cos(np.pi/6), -np.sin(np.pi/6), -np.sin(np.pi/6), np.cos(np.pi/6), fin_thickness, fin_span, fin_cs_chord, 1) }}
    {{ control_surface("elevator_port", r_fin_cop_z*np.cos(np.pi/6), -r_fin_cop_z*np.sin(np.pi/6), 2*np.pi/3*2, 0, 0, 1*np.cos(np.pi/6), np.sin(np.pi/6), np.sin(np.pi/6), np.cos(np.pi/6), fin_thickness, fin_span, fin_cs_chord, 1) }}

    {# Starboard Main Thruster #}
    {{ tilt_thruster(0, "cw", "hull", 2*tail_mot_prop_r, mot_tau, mot_max_vel, mot_coeff, false, 3.07, 2.5, -0.5, -np.pi/2) }}
    {# Port Main Thruster #}
    {{ tilt_thruster(1, "ccw", "hull", 2*tail_mot_prop_r, mot_tau, mot_max_vel, mot_coeff, false, 3.07, -2.5, -0.5, -np.pi/2) }}

    {# Yaw tail thruster #}
    {{ thruster(7, "cw", "hull", tail_mot_prop_r, tail_mot_tau, tail_mot_max_vel, tail_mot_coeff, true, hull_cv - hull_length - tail_mot_prop_r, 0, 0, np.pi/2) }}
    {# Vertical tail thruster #}
    {{ thruster(8, "cw", "hull", tail_mot_prop_r, tail_mot_tau, tail_mot_max_vel, tail_mot_coeff, true, hull_cv - hull_length - tail_mot_prop_r - 0.5, 0, 0, 0) }}

    {# ---------------------------------------------------------------- #}
    {# Plugins #}
    {# ---------------------------------------------------------------- #}
    {# Airship Dynamics #}
    <plugin name='gazebo_airship_dynamics_plugin' filename='libgazebo_airship_dynamics_plugin.so'>
      <robotNamespace/>
      <linkName>hull</linkName>
      <hullVolume>{{ hull_volume }}</hullVolume>
      <finenessRatio>{{ fineness_ratio }}</finenessRatio>
      <hullLength>{{ hull_length }}</hullLength>
      <airDensity>{{ air_density }}</airDensity>
      <m11>{{ m11 }}</m11>
      <m22>{{ m22 }}</m22>
      <m26>{{ m26 }}</m26>
      <m33>{{ m33 }}</m33>
      <m35>{{ m35 }}</m35>
      <m44>{{ m44 }}</m44>
      <m53>{{ m53 }}</m53>
      <m55>{{ m55 }}</m55>
      <m62>{{ m62 }}</m62>
      <m66>{{ m66 }}</m66>
      <log>{{log_airship_dynamics}}</log>
      <distCOV>{{ hull_cv }}</distCOV>
      <distPotentialFlow>{{ dist_potential_flow }}</distPotentialFlow>
      <forceHullInviscidFlowCoeff>{{ force_hull_inviscid_flow_coeff }}</forceHullInviscidFlowCoeff>
      <forceHullViscousFlowCoeff>{{ force_hull_viscous_flow_coeff }}</forceHullViscousFlowCoeff>
      <momentHullInviscidFlowCoeff>{{ moment_hull_inviscid_flow_coeff }}</momentHullInviscidFlowCoeff>
      <momentHullViscousFlowCoeff>{{ moment_hull_viscous_flow_coeff }}</momentHullViscousFlowCoeff>
      <axialDragCoeff>{{ axial_drag_coeff }}</axialDragCoeff>
      <windSubTopic>world_wind</windSubTopic>
    </plugin>
    {# Fins #}
    {{ fin_plugin("fin1", 0, r_fin_cop_z, 1, 0, 0) }}
    {{ fin_plugin("fin2", -r_fin_cop_z*np.cos(np.pi/6), -r_fin_cop_z*np.sin(np.pi/6), -np.sin(np.pi/6), np.cos(np.pi/6), np.pi/3*2) }}
    {{ fin_plugin("fin3", r_fin_cop_z*np.cos(np.pi/6), -r_fin_cop_z*np.sin(np.pi/6), np.sin(np.pi/6), np.cos(np.pi/6), 2*np.pi/3*2) }}

    {# IMU #}
    <plugin name='rotors_gazebo_imu_plugin' filename='libgazebo_imu_plugin.so'>
      <robotNamespace/>
      <linkName>/imu_link</linkName>
      <imuTopic>/imu</imuTopic>
      <gyroscopeNoiseDensity>0.0003394</gyroscopeNoiseDensity>
      <gyroscopeRandomWalk>3.8785e-05</gyroscopeRandomWalk>
      <gyroscopeBiasCorrelationTime>1000.0</gyroscopeBiasCorrelationTime>
      <gyroscopeTurnOnBiasSigma>0.0087</gyroscopeTurnOnBiasSigma>
      <accelerometerNoiseDensity>0.004</accelerometerNoiseDensity>
      <accelerometerRandomWalk>0.006</accelerometerRandomWalk>
      <accelerometerBiasCorrelationTime>300.0</accelerometerBiasCorrelationTime>
      <accelerometerTurnOnBiasSigma>0.196</accelerometerTurnOnBiasSigma>
    </plugin>

    {# Magnetometer #}
    <plugin name='magnetometer_plugin' filename='libgazebo_magnetometer_plugin.so'>
      <robotNamespace/>
      <pubRate>100</pubRate>
      <noiseDensity>0.0004</noiseDensity>
      <randomWalk>6.4e-06</randomWalk>
      <biasCorrelationTime>600</biasCorrelationTime>
      <magTopic>/mag</magTopic>
    </plugin>

    {# Barometer #}
    <plugin name='barometer_plugin' filename='libgazebo_barometer_plugin.so'>
      <robotNamespace/>
      <pubRate>50</pubRate>
      <baroTopic>/baro</baroTopic>
      <baroDriftPaPerSec>0</baroDriftPaPerSec>
    </plugin>

    {# MAVLink #}
    <plugin name='mavlink_interface' filename='libgazebo_mavlink_interface.so'>
      <robotNamespace/>
      <imuSubTopic>/imu</imuSubTopic>
      <magSubTopic>/mag</magSubTopic>
      <baroSubTopic>/baro</baroSubTopic>
      <lidarSubTopic>/sf10a/link/lidar</lidarSubTopic>
      <mavlink_addr>INADDR_ANY</mavlink_addr>
      <mavlink_tcp_port>4560</mavlink_tcp_port>
      <mavlink_udp_port>14560</mavlink_udp_port>
      <serialEnabled>false</serialEnabled>
      <serialDevice>/dev/ttyACM0</serialDevice>
      <baudRate>921600</baudRate>
      <qgc_addr>INADDR_ANY</qgc_addr>
      <qgc_udp_port>14550</qgc_udp_port>

      <hil_mode>false</hil_mode>
      <hil_state_level>false</hil_state_level>
      <enable_lockstep>true</enable_lockstep>
      <use_tcp>true</use_tcp>
      <motorSpeedCommandPubTopic>/gazebo/command/motor_speed</motorSpeedCommandPubTopic>
      <vehicle_is_tailsitter>false</vehicle_is_tailsitter>
      <send_odometry>1</send_odometry>
      <send_vision_estimation>true</send_vision_estimation>
      <send_odometry>false</send_odometry>

      <control_channels>
        <channel name='rotor_0'>
          <input_index>0</input_index>
          <input_offset>0</input_offset>
          <input_scaling>{{ mot_max_vel }}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>velocity</joint_control_type>
          <joint_name>rotor_0_joint</joint_name>
        </channel>
        <channel name='rotor_1'>
          <input_index>1</input_index>
          <input_offset>0</input_offset>
          <input_scaling>{{ mot_max_vel }}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>velocity</joint_control_type>
          <joint_name>rotor_1_joint</joint_name>
        </channel>
        <channel name="motor0_tilt">
          <input_index>2</input_index>
          <input_offset>0</input_offset>
          <input_scaling>{{ mot_max_angle/2 }}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>position</joint_control_type>
          <joint_name>motor_0_joint</joint_name>
          <joint_control_pid>
            <p>10</p>
            <i>0</i>
            <d>0</d>
            <iMax>1.0</iMax>
            <iMin>-1.0</iMin>
            <cmdMax>{{ mot_max_angle/2 }}</cmdMax>
            <cmdMin>{{ -mot_max_angle/2 }}</cmdMin>
          </joint_control_pid>
        </channel>
        <channel name="motor1_tilt">
          <input_index>3</input_index>
          <input_offset>0</input_offset>
          <input_scaling>{{ mot_max_angle/2 }}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>position</joint_control_type>
          <joint_name>motor_1_joint</joint_name>
          <joint_control_pid>
            <p>10</p>
            <i>0</i>
            <d>0</d>
            <iMax>1.0</iMax>
            <iMin>-1.0</iMin>
            <cmdMax>{{ mot_max_angle/2 }}</cmdMax>
            <cmdMin>{{ -mot_max_angle/2 }}</cmdMin>
          </joint_control_pid>
        </channel>
        <channel name="port_elevator">
          <input_index>4</input_index>
          <input_offset>0</input_offset>
          <input_scaling>{{ fin_cs_max_angle }}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>position_kinematic</joint_control_type>
          <joint_name>elevator_port_joint</joint_name>
        </channel>
        <channel name="sb_elevator">
          <input_index>5</input_index>
          <input_offset>0</input_offset>
          <input_scaling>{{ fin_cs_max_angle }}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>position_kinematic</joint_control_type>
          <joint_name>elevator_sb_joint</joint_name>
        </channel>
        <channel name="top_rudder">
          <input_index>6</input_index>
          <input_offset>0</input_offset>
          <input_scaling>{{ fin_cs_max_angle }}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>position_kinematic</joint_control_type>
          <joint_name>rudder_top_joint</joint_name>
        </channel>
        <channel name='rotor_7'>
          <input_index>7</input_index>
          <input_offset>0</input_offset>
          <input_scaling>{{ tail_mot_max_vel }}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>velocity</joint_control_type>
          <joint_name>rotor_7_joint</joint_name>
        </channel>
        <channel name='rotor_8'>
          <input_index>8</input_index>
          <input_offset>0</input_offset>
          <input_scaling>{{ -1.0*tail_mot_max_vel }}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>velocity</joint_control_type>
          <joint_name>rotor_8_joint</joint_name>
        </channel>
      </control_channels>
    </plugin>
    <plugin name='groundtruth_plugin' filename='libgazebo_groundtruth_plugin.so'>
      <robotNamespace/>
    </plugin>

  </model>

</sdf>

<!-- vim: set et ft=xml fenc=utf-8 ff=unix sts=0 sw=2 ts=2 : -->
